def digits(n: int) -> list[int]:
    digits = []
    while n != 0:
        digits.append(n % 10)
        n //= 10
    while len(digits) < 4:
        digits.append(0)
    return digits[::-1]

def generateKey(num1: int, num2: int, num3: int) -> int:
    """
    ID: 3270
    Tags:   Math
    Time:   O(1)
    Memory: O(1)

    Task
    ----------
    You are given three positive integers num1, num2, and num3.

    The key of num1, num2, and num3 is defined as a four-digit number such that:

    Initially, if any number has less than four digits, it is padded with leading zeros.
    The ith digit (1 <= i <= 4) of the key is generated by taking the smallest digit among the ith
    digits of num1, num2, and num3.
    Return the key of the three numbers without leading zeros (if any).

    Parameters
    ----------
    num1: int
    num2: int
    num3: int

    Returns
    -------
    int

    Examples
    --------
    >>> generateKey(1, 10, 1000)
    0

    Explanation:
    On padding, num1 becomes "0001", num2 becomes "0010", and num3 remains "1000".

    The 1st digit of the key is min(0, 0, 1).
    The 2nd digit of the key is min(0, 0, 0).
    The 3rd digit of the key is min(0, 1, 0).
    The 4th digit of the key is min(1, 0, 0).
    Hence, the key is "0000", i.e. 0.

    >>> generateKey(987, 879, 798)
    777

    >>> generateKey(1, 2, 3)
    1
    """
    d1, d2, d3 = digits(num1), digits(num2), digits(num3)
    d = [min(n1, n2, n3) for n1, n2, n3 in zip(d1, d2, d3)]
    return d[0] * 1000 + d[1] * 100 + d[2] * 10 + d[3]

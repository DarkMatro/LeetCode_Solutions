def removePalindromeSub(s: str) -> int:
    """
    ID: 1332
    Tags:   Two Pointers, String
    Time:   O(1)
    Memory: O(1)

    Task
    ----------
    You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic
    subsequence from s.

    Return the minimum number of steps to make the given string empty.

    A string is a subsequence of a given string if it is generated by deleting some characters of a given string without
    changing its order. Note that a subsequence does not necessarily need to be contiguous.

    A string is called palindrome if is one that reads the same backward as well as forward.

    Parameters
    ----------
    s : str

    Returns
    -------
    out : int

    Examples
    --------
    >>> removePalindromeSub("ababa")
    1

    Explanation: s is already a palindrome, so its entirety can be removed in a single step.

    >>> removePalindromeSub("abb")
    2

    Explanation: "abb" -> "bb" -> "".
    Remove palindromic subsequence "a" then "bb"

    >>> removePalindromeSub("baabb")
    2

    Explanation: "baabb" -> "b" -> "".
    Remove palindromic subsequence "baab" then "b".
    """
    if s == '':
        return 0
    elif s == s[::-1]:
        return 1
    else:
        return 2
